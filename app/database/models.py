import enum
from sqlalchemy import ForeignKey, String, BigInteger, Text, Enum
from sqlalchemy.orm import Mapped, mapped_column, declarative_base, relationship
from sqlalchemy.ext.asyncio import AsyncSession, create_async_engine, async_sessionmaker, AsyncAttrs

from config import DB_URL

# –°–æ–∑–¥–∞–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –¥–≤–∏–∂–æ–∫ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
engine = create_async_engine(DB_URL, echo=True)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ sessionmaker –¥–ª—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã—Ö —Å–µ—Å—Å–∏–π
async_session = async_sessionmaker(
    engine, class_=AsyncSession, expire_on_commit=False
)

# –ë–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å –¥–ª—è –≤—Å–µ—Ö –º–æ–¥–µ–ª–µ–π —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã—Ö –∞—Ç—Ç—Ä–∏–±—É—Ç–æ–≤
Base = declarative_base()  # –ó–¥–µ—Å—å –Ω–µ—Ç AsyncAttrs, —Ç–∞–∫ –∫–∞–∫ —ç—Ç–æ —Ç–æ–ª—å–∫–æ –¥–ª—è –º–æ–¥–µ–ª–µ–π

# –ú–æ–¥–µ–ª—å User
class User(Base):
    __tablename__ = 'users'  # –£–∫–∞–∑–∞–Ω–∏–µ –∏–º–µ–Ω–∏ —Ç–∞–±–ª–∏—Ü—ã

    id: Mapped[int] = mapped_column(primary_key=True)
    tg_id = mapped_column(BigInteger, unique=True, nullable=False)

    orders: Mapped[list['Order']] = relationship(back_populates="user", cascade="all, delete-orphan")

# –°—Ç–∞—Ç—É—Å—ã –∑–∞–∫–∞–∑–∞
class OrderStatus(enum.Enum):
    pending = "üîÉ –í –æ–∂–∏–¥–∞–Ω–∏–∏"
    in_progress = "üî• –í —Ä–∞–±–æ—Ç–µ"
    completed = "‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω"
    canceled = "‚ùå –û—Ç–º–µ–Ω–µ–Ω"

# –ú–æ–¥–µ–ª—å Order
class Order(Base):
    __tablename__ = 'orders'  # –£–∫–∞–∑–∞–Ω–∏–µ –∏–º–µ–Ω–∏ —Ç–∞–±–ª–∏—Ü—ã

    id: Mapped[int] = mapped_column(primary_key=True)
    user_id: Mapped[int] = mapped_column(ForeignKey('users.id'), nullable=False)
    phone_number: Mapped[str] = mapped_column(String(15), nullable=False)
    email: Mapped[str] = mapped_column(String(255), nullable=False)
    description: Mapped[str] = mapped_column(Text, nullable=True)
    status: Mapped[OrderStatus] = mapped_column(Enum(OrderStatus), default=OrderStatus.pending)

    user: Mapped['User'] = relationship(back_populates="orders")

# –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –≤—Å–µ—Ö —Ç–∞–±–ª–∏—Ü
async def async_main():
    async with engine.begin() as conn:
        await conn.run_sync(Base.metadata.create_all)
